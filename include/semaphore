/*

Copyright (c) 2017, NVIDIA Corporation
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.

*/

#ifndef __semaphore__
#define __semaphore__

#include "details/config.hpp"

namespace __semaphore_ns
{
namespace experimental
{
inline namespace v1
{

// 32.10, waiting and notifying functions
template <class T>
__semaphore_abi void atomic_notify_one(const volatile atomic<T>*);
template <class T>
__semaphore_abi void atomic_notify_one(const atomic<T>*);
template <class T>
__semaphore_abi void atomic_notify_all(const volatile atomic<T>*);
template <class T>
__semaphore_abi void atomic_notify_all(const atomic<T>*);
template <class T, class V>
__semaphore_abi void atomic_wait_explicit(const volatile atomic<T>*, V, std::memory_order);
template <class T, class V>
__semaphore_abi void atomic_wait_explicit(const atomic<T>*, V, std::memory_order);
template <class T, class V>
__semaphore_abi void atomic_wait(const volatile atomic<T>*, V);
template <class T, class V>
__semaphore_abi void atomic_wait(const atomic<T>*, V);

// 33.5.1, condition variables
class condition_variable_atomic;

// 33.7, semaphore type and operations
class binary_semaphore;
class counting_semaphore;

// 33.7.2, binary semaphore
class binary_semaphore {
public:
  using count_type = uint32_t; // see 33.7.2.1
  static constexpr count_type max = 1;

  __semaphore_abi binary_semaphore(count_type = 0);
  __semaphore_abi ~binary_semaphore();

  binary_semaphore(const binary_semaphore&) = delete;
  binary_semaphore& operator=(const binary_semaphore&) = delete;

  __semaphore_abi void release();
  __semaphore_abi void acquire();
  __semaphore_abi bool try_acquire();
  template <class Clock, class Duration>
    bool try_acquire_until(std::chrono::time_point<Clock, Duration> const&);
  template <class Rep, class Period>
    bool try_acquire_for(std::chrono::duration<Rep, Period> const&);

  // implementation-defined

  static constexpr count_type __valubit = 1;
  static constexpr count_type __lockbit = 2;
  static constexpr count_type __slowbit = 4;
  static constexpr count_type __contbit = 8;

#ifdef __semaphore_fast_path
    __semaphore_abi void __release_slow(count_type old);
#endif

    __semaphore_abi void __acquire_slow();

    bool __acquire_slow_timed(std::chrono::nanoseconds const&);

  atomic<count_type> __atom;
  atomic<count_type> __ticket;
  atomic<count_type> __tocket;
  bool __stolen;
};

// 33.7.3, counting semaphore
class counting_semaphore {
public:
#ifndef __semaphore_sem
  using count_type = uint32_t; // see 33.7.3.1
#ifdef __semaphore_fast_path
  static constexpr uint32_t __valumask = ~3,
                            __contmask = 2,
                            __lockmask = 1,
                            __shift = 2;
#else //__semaphore_fast_path
  static constexpr uint32_t __valumask = ~0,
                            __contmask = 0,
                            __lockmask = 0,
                            __shift = 0;
#endif //__semaphore_fast_path
  static constexpr count_type max = (__valumask >> (__shift ? __shift : 1)); // see 33.7.3.2
#else //__semaphore_sem
  using count_type = int32_t; // see 33.7.3.1
  static constexpr count_type max = (numeric_limits<count_type>::max)() >> 1; // see 33.7.3.2
#endif //__semaphore_sem

  __semaphore_abi counting_semaphore(count_type = 0);
  __semaphore_abi ~counting_semaphore();

  counting_semaphore(const counting_semaphore&) = delete;
  counting_semaphore& operator=(const counting_semaphore&) = delete;

  __semaphore_abi void release(count_type = 1);
  __semaphore_abi void acquire();
  __semaphore_abi bool try_acquire();
  template <class Clock, class Duration>
    bool try_acquire_until(std::chrono::time_point<Clock, Duration> const&);
  template <class Rep, class Period>
    bool try_acquire_for(std::chrono::duration<Rep, Period> const&);

  // implementation-defined

#ifndef __semaphore_sem
  __semaphore_abi bool __fetch_sub_if_slow(count_type old);
  __semaphore_abi bool __fetch_sub_if();
#ifdef __semaphore_fast_path
  __semaphore_abi void __fetch_add_slow(count_type term, count_type old);
#endif //__semaphore_fast_path

  __semaphore_abi void __acquire_slow();
  bool __acquire_slow_timed(std::chrono::nanoseconds const&);
  __semaphore_abi inline bool __acquire_fast();

  atomic<count_type> atom;
#else //__semaphore_sem
  __semaphore_abi inline void __acquire_fast();
  __semaphore_abi inline void __acquire_slow();
  inline void __acquire_slow_timed(std::chrono::nanoseconds const&);
  __semaphore_abi inline void __backfill();

  __semaphore_sem_t __semaphore;
  atomic<count_type> __frontbuffer;
#ifdef __semaphore_back_buffered
  atomic<count_type> __backbuffer;
#endif //__semaphore_back_buffered
#endif //__semaphore_sem
  friend class condition_variable_atomic;
};

// 33.5.5, atomic condition variable
class alignas(64) condition_variable_atomic {
public:

  __semaphore_abi condition_variable_atomic();
  __semaphore_abi ~condition_variable_atomic();

  condition_variable_atomic(const condition_variable_atomic&) = delete;
  condition_variable_atomic& operator=(const condition_variable_atomic&) = delete;

  template <class T> 
    __semaphore_abi void notify_one(const atomic<T>&);
  template <class T> 
    __semaphore_abi void notify_one(const volatile atomic<T>&);
  template <class T> 
    __semaphore_abi void notify_all(const atomic<T>&);
  template <class T> 
    __semaphore_abi void notify_all(const volatile atomic<T>&);
  template <class T> 
    __semaphore_abi void wait(const volatile atomic<T>&, T, 
                              std::memory_order = std::memory_order_seq_cst);
  template <class T> 
    __semaphore_abi void wait(const atomic<T>&, T, 
                              std::memory_order = std::memory_order_seq_cst);              
  template <class T, class Predicate> 
    __semaphore_abi void wait(const volatile atomic<T>&, Predicate pred, 
                              std::memory_order = std::memory_order_seq_cst);
  template <class T, class Predicate> 
    __semaphore_abi void wait(const atomic<T>&, Predicate pred, 
                              std::memory_order = std::memory_order_seq_cst);
  template <class T, class Clock, class Duration>
    bool wait_until(const volatile atomic<T>&, T, 
                    std::chrono::time_point<Clock, Duration> const&, 
                    std::memory_order = std::memory_order_seq_cst);
  template <class T, class Clock, class Duration>
    bool wait_until(const atomic<T>&, T, 
                    std::chrono::time_point<Clock, Duration> const&, 
                    std::memory_order = std::memory_order_seq_cst);
  template <class T, class Predicate, class Clock, class Duration>
    bool wait_until(const volatile atomic<T>&, Predicate pred,
                    std::chrono::time_point<Clock, Duration> const&, 
                    std::memory_order = std::memory_order_seq_cst);
  template <class T, class Predicate, class Clock, class Duration>
    bool wait_until(const atomic<T>&, Predicate pred,
                    std::chrono::time_point<Clock, Duration> const&, 
                    std::memory_order = std::memory_order_seq_cst);
  template <class T, class Rep, class Period>
    bool wait_for(const volatile atomic<T>&, T, 
                  std::chrono::duration<Rep, Period> const&, 
                  std::memory_order = std::memory_order_seq_cst);
  template <class T, class Rep, class Period>
    bool wait_for(const atomic<T>&, T, 
                  std::chrono::duration<Rep, Period> const&, 
                  std::memory_order = std::memory_order_seq_cst);
  template <class T, class Predicate, class Rep, class Period>
    bool wait_for(const volatile atomic<T>&, Predicate pred,
                  std::chrono::duration<Rep, Period> const&, 
                  std::memory_order = std::memory_order_seq_cst);
  template <class T, class Predicate, class Rep, class Period>
    bool wait_for(const atomic<T>&, Predicate pred,
                  std::chrono::duration<Rep, Period> const&, 
                  std::memory_order = std::memory_order_seq_cst);

  // implementation-defined

  __semaphore_abi void __notify();
  template <class A, class Predicate>
    __semaphore_abi void __wait(A& object, Predicate pred, std::memory_order order);
  template <class A, class Predicate, class Clock, class Duration>
    bool __wait_until(A& object, Predicate pred, std::chrono::time_point<Clock, Duration> const& abs_time, std::memory_order order);
  template <class A, class Predicate, class Rep, class Period>
    bool __wait_for(A& object, Predicate pred, std::chrono::duration<Rep, Period> const& rel_time, std::memory_order order);
#ifndef __semaphore_cuda
  counting_semaphore                     __sem;
  atomic<counting_semaphore::count_type> __reversebuffer{ 0 };
#endif
  static __semaphore_abi condition_variable_atomic *__from_ptr(void const *ptr);
  static __semaphore_abi condition_variable_atomic *__from_ptr(void const volatile *ptr);
};

#include "details/binary_semaphore.hpp"
#include "details/counting_semaphore.hpp"
#include "details/condition_variable_atomic.hpp"
#include "details/waitnotify.hpp"

} //v1
} // namespace experimental
} //__semaphore_ns

#endif //__semaphore__
